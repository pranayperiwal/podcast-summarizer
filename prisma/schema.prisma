
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user                User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                String   @id @default(cuid())
  sessionToken      String   @unique
  userId            Int
  expires           DateTime
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier        String
  token             String   @unique
  expires           DateTime

  @@unique([identifier, token])
}

model User {
  id                  Int   @id @default(autoincrement())
  name                String?
  email               String @unique  
  emailVerified       DateTime?
  image               String?             
  credits             Float   @default(2.0)
  podcastsSummarised  Podcast[]
  accounts            Account[]
  sessions            Session[]
  transactions        Transaction[]
  creditsSpent        CreditsSpent[]
}



model Podcast {
  id                  Int   @id @default(autoincrement())
  showName            String
  episodeName         String  
  duration            Int
  image               String
  date                DateTime
  users               User[]
  hash                String
}

model Transaction {
  transactionId   Int       @id @default(autoincrement())
  userId          Int
  transactionDate DateTime
  amount          Int
  paymentMethod   String
  status          String

  // Relationship
  user            User      @relation(fields: [userId], references: [id])
}

model CreditsSpent {
  id            Int       @id @default(autoincrement())
  userId        Int
  date          DateTime
  quantity      Float
  podcastId     Int
  // Relationships
  user          User      @relation(fields: [userId], references: [id])
}

model Request {
  id          Int       @id @default(autoincrement())
  hash        String 
  podcastName String
  showName    String
  date        DateTime
  status      String //success | in progress | failed
  
}